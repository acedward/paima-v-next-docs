"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7419],{6404:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>o});var i=n(9593);const s={},r=i.createContext(s);function c(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(r.Provider,{value:t},e.children)}},7743:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"home/components/contracts","title":"contracts","description":"Contracts","source":"@site/docs/home/100-components/105-contracts.md","sourceDirName":"home/100-components","slug":"/home/components/contracts","permalink":"/ja/home/components/contracts","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/105-contracts.md","tags":[],"version":"current","sidebarPosition":105,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Paima L2 Contract","permalink":"/ja/home/components/paima-l2-contract"},"next":{"title":"processes","permalink":"/ja/home/components/processes"}}');var s=n(3261),r=n(6404);const c={},o=void 0,a={},l=[{value:"Contracts",id:"contracts",level:2},{value:"Working with Your Own Smart Contracts",id:"working-with-your-own-smart-contracts",level:3},{value:"EVM Contracts (Solidity)",id:"evm-contracts-solidity",level:4},{value:"ZK Contracts (Midnight)",id:"zk-contracts-midnight",level:4},{value:"Compiling and Deploying Contracts",id:"compiling-and-deploying-contracts",level:3},{value:"The <code>PaimaL2Contract</code>",id:"the-paimal2contract",level:3},{value:"Paima-Provided Contracts",id:"paima-provided-contracts",level:3},{value:"Connecting Contracts to the State Machine",id:"connecting-contracts-to-the-state-machine",level:3},{value:"Paima-Provided EVM Contracts",id:"paima-provided-evm-contracts",level:3},{value:"Core Paima Contracts",id:"core-paima-contracts",level:4},{value:"Standard Token Contracts",id:"standard-token-contracts",level:4},{value:"Development &amp; Testing Contracts",id:"development--testing-contracts",level:4},{value:"Standard Interfaces",id:"standard-interfaces",level:4},{value:"Utility Libraries",id:"utility-libraries",level:4}];function d(e){const t={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"contracts",children:"Contracts"}),"\n",(0,s.jsxs)(t.p,{children:["Paima Engine is designed to be chain-agnostic and contract-agnostic. It can work with virtually any smart contract deployed on its supported chains by monitoring the ",(0,s.jsx)(t.strong,{children:"events"})," they emit or the ",(0,s.jsx)(t.strong,{children:"public state"})," they expose."]}),"\n",(0,s.jsxs)(t.p,{children:["The engine's Sync Service listens for these on-chain occurrences and transforms them into inputs for your ",(0,s.jsx)(t.a,{href:"/ja/home/components/state-machine",children:"State Machine"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"working-with-your-own-smart-contracts",children:"Working with Your Own Smart Contracts"}),"\n",(0,s.jsx)(t.p,{children:"You can write and deploy custom contracts to handle specific on-chain logic, such as minting NFTs, transferring tokens, or managing registries. Paima Engine will then observe these contracts as a data source."}),"\n",(0,s.jsx)(t.h4,{id:"evm-contracts-solidity",children:"EVM Contracts (Solidity)"}),"\n",(0,s.jsx)(t.p,{children:"You can deploy any standard EVM smart contract. The key is that your contract must emit events for any state change you want Paima to react to."}),"\n",(0,s.jsxs)(t.p,{children:["For example, here is a simple ERC20 token contract. Paima doesn't interact with the ",(0,s.jsx)(t.code,{children:"mint"})," function directly; instead, it listens for the ",(0,s.jsx)(t.code,{children:"Transfer"})," event that the standard ",(0,s.jsx)(t.code,{children:"_mint"})," function emits."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-solidity",children:'// File: /contracts/evm/src/Erc20Dev.sol\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\n// A standard ERC20 contract with a public mint function.\ncontract Erc20Dev is ERC20 {\n    constructor() ERC20("Mock ERC20", "MERC") {}\n\n    function mint(address _to, uint256 _amount) external {\n        // This internal function emits the standard `Transfer` event.\n        // Paima Engine will listen for this event.\n        _mint(_to, _amount);\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"zk-contracts-midnight",children:"ZK Contracts (Midnight)"}),"\n",(0,s.jsxs)(t.p,{children:["Paima can also monitor Zero-Knowledge contracts. On Midnight, instead of events, contracts expose a public ",(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"ledger"})," state"]}),". Paima primitives are configured to watch for changes to this public state."]}),"\n",(0,s.jsxs)(t.p,{children:["This example shows a simple counter contract. The ",(0,s.jsx)(t.code,{children:"increment"})," circuit is a private state transition, but its effect is made visible by updating the public ",(0,s.jsx)(t.code,{children:"round"})," ledger."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:'// File: /contracts/midnight/src/main.rs\npragma language_version 0.16;\n\nimport CompactStandardLibrary;\n\n// This is the public state that Paima Engine will monitor.\nexport ledger round: Counter;\n\n// This is a state transition function (a "circuit").\n// When executed, it modifies the public `round` state.\nexport circuit increment(): [] {\n  round.increment(1);\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"compiling-and-deploying-contracts",children:"Compiling and Deploying Contracts"}),"\n",(0,s.jsx)(t.p,{children:"The Paima Engine templates come with pre-configured scripts to compile your smart contracts and generate the necessary artifacts (like ABIs)."}),"\n",(0,s.jsx)(t.p,{children:"You can compile all contracts in your project with the following commands:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"# Compile EVM contracts (Solidity)\ndeno task build:evm\n\n# Compile Midnight contracts\ndeno task build:midnight\n"})}),"\n",(0,s.jsx)(t.p,{children:"The templates also include scripts for deploying these contracts to local development chains or public testnets/mainnets."}),"\n",(0,s.jsxs)(t.h3,{id:"the-paimal2contract",children:["The ",(0,s.jsx)(t.code,{children:"PaimaL2Contract"})]}),"\n",(0,s.jsxs)(t.p,{children:["While Paima can listen to any contract, it also provides a specialized contract called ",(0,s.jsx)(t.code,{children:"PaimaL2Contract"}),'. This contract serves as a highly efficient, generic "mailbox" for submitting game-specific inputs directly to the state machine.']}),"\n",(0,s.jsxs)(t.p,{children:["Instead of defining dozens of specific functions on-chain (e.g., ",(0,s.jsx)(t.code,{children:"attack(uint monsterId)"}),", ",(0,s.jsx)(t.code,{children:"useItem(uint itemId)"}),"), you send a single transaction to the ",(0,s.jsx)(t.code,{children:"PaimaL2Contract"}),"'s ",(0,s.jsx)(t.code,{children:"submitInput"})," function with a concise, string-based payload."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Example:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Without L2 Contract:"})," ",(0,s.jsx)(t.code,{children:"myGameContract.attack(123)"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"With L2 Contract:"})," ",(0,s.jsx)(t.code,{children:'paimaL2Contract.submitInput("attack|123")'})]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This approach has significant advantages:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Gas Efficiency"}),": It reduces on-chain logic to a minimum, saving gas."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Flexibility"}),": You can add new game actions without needing to deploy a new contract."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Chain Abstraction"}),": It is the entry point for the ",(0,s.jsx)(t.strong,{children:"Batcher"}),", which allows users to submit inputs from any chain, often without paying gas fees themselves."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["More in the ",(0,s.jsx)(t.a,{href:"/ja/home/components/paima-l2-contract",children:"Paima L2 Contract Section"})]}),"\n",(0,s.jsx)(t.h3,{id:"paima-provided-contracts",children:"Paima-Provided Contracts"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"@paima/evm-contracts"})," package includes a variety of useful contracts, including implementations of common standards and the core ",(0,s.jsx)(t.code,{children:"PaimaL2Contract"}),"."]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Contract"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"PaimaL2Contract"})})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The core contract for submitting game inputs."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"erc20"}),", ",(0,s.jsx)(t.code,{children:"erc721"})]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Standard OpenZeppelin implementations."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"Erc20Dev"}),", ",(0,s.jsx)(t.code,{children:"Erc721Dev"})]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Simple mintable versions for development and testing."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.em,{children:"Interfaces"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"IERC20"}),", ",(0,s.jsx)(t.code,{children:"IERC721"}),", etc., for interacting with other contracts."]})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"connecting-contracts-to-the-state-machine",children:"Connecting Contracts to the State Machine"}),"\n",(0,s.jsxs)(t.p,{children:["Once your contract is compiled and deployed, the final step is to tell the ",(0,s.jsx)(t.strong,{children:"Sync Service"})," to monitor it. This is done by adding a ",(0,s.jsx)(t.strong,{children:"Primitive"})," to your chain configuration. The primitive specifies the contract's address, the event to listen for (via its ABI), and the ",(0,s.jsx)(t.code,{children:"scheduledPrefix"})," that will trigger your STF."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'// In your chain config file...\n.buildPrimitives(builder =>\n    builder.addPrimitive(\n        (syncProtocols) => syncProtocols.mainEvmRPC,\n        (network, deployments, syncProtocol) => ({\n          name: "My_ERC20_Token",\n          type: ConfigPrimitiveType.EvmRpcERC20,\n          contractAddress: "0x...", // The address of your deployed Erc20Dev contract\n          abi: getEvmEvent(\n            erc20dev.abi, // The ABI from your compiled contract\n            "Transfer(address,address,uint256)" // The specific event signature\n          ),\n          scheduledPrefix: \'transfer_merc\', // Triggers the \'transfer_merc\' STF\n        })\n    )\n)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"paima-provided-evm-contracts",children:"Paima-Provided EVM Contracts"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"@paima/evm-contracts"})," package ships with a suite of pre-built, audited smart contracts and libraries to accelerate your development. These can be used directly in your project."]}),"\n",(0,s.jsx)(t.h4,{id:"core-paima-contracts",children:"Core Paima Contracts"}),"\n",(0,s.jsx)(t.p,{children:"This is the most important contract for interacting with the Paima Engine's state machine."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Contract"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"PaimaL2Contract"})})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:['The central "mailbox" for your application. This contract provides the ',(0,s.jsx)(t.code,{children:"submitInput"})," function, which is the most gas-efficient and flexible way to send game moves and actions from the on-chain world to your state machine. It serves as the primary entry point for user interactions and the Batcher service."]})]})})]}),"\n",(0,s.jsx)(t.h4,{id:"standard-token-contracts",children:"Standard Token Contracts"}),"\n",(0,s.jsx)(t.p,{children:"These are standard implementations of the most common token types, based on the battle-tested OpenZeppelin library."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Contract"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"ERC20"})})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"A standard implementation of the ERC20 fungible token standard."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"ERC721"})})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"A standard implementation of the ERC721 non-fungible token (NFT) standard."})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"development--testing-contracts",children:"Development & Testing Contracts"}),"\n",(0,s.jsx)(t.p,{children:"These are simplified, mintable versions of the standard contracts, designed to make local development, prototyping, and testing quick and easy."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Contract"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"Erc20Dev"})})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["A simple ERC20 contract that includes a public ",(0,s.jsx)(t.code,{children:"mint(address, amount)"})," function, allowing you to easily create tokens for testing purposes."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"Erc721Dev"})})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["A simple ERC721 contract with a public ",(0,s.jsx)(t.code,{children:"mint(address)"})," function, allowing you to create NFTs on demand during development."]})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"standard-interfaces",children:"Standard Interfaces"}),"\n",(0,s.jsx)(t.p,{children:"Interfaces are crucial for interacting with any contract on the EVM, whether it's one you deployed or one belonging to another protocol. These allow your contracts to call functions on other contracts in a type-safe way."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Interface"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"IERC20"})})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The interface for the ERC20 standard. Use this to interact with any fungible token."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"IERC721"})})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The interface for the ERC721 standard. Use this to interact with any NFT."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"IERC20Metadata"})})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["An extension of ",(0,s.jsx)(t.code,{children:"IERC20"})," that includes functions like ",(0,s.jsx)(t.code,{children:"name()"}),", ",(0,s.jsx)(t.code,{children:"symbol()"}),", and ",(0,s.jsx)(t.code,{children:"decimals()"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"IERC721Metadata"})})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["An extension of ",(0,s.jsx)(t.code,{children:"IERC721"})," that includes functions like ",(0,s.jsx)(t.code,{children:"name()"}),", ",(0,s.jsx)(t.code,{children:"symbol()"}),", and ",(0,s.jsx)(t.code,{children:"tokenURI()"}),"."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"IERC165"})})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"The interface for EIP-165, which allows you to check if a contract supports a specific interface."})]})]})]}),"\n",(0,s.jsx)(t.h4,{id:"utility-libraries",children:"Utility Libraries"}),"\n",(0,s.jsx)(t.p,{children:"For more advanced Solidity development, the package also includes several of OpenZeppelin's low-level utility libraries."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Library"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Address"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["A library with helper functions for the ",(0,s.jsx)(t.code,{children:"address"})," type, like checking if an address is a contract."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Strings"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"A library for converting numbers to strings on-chain."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Math"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"A library providing safe math operations that prevent overflow and underflow."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Context"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["A base contract providing information about the context of a transaction, such as ",(0,s.jsx)(t.code,{children:"msg.sender"}),"."]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);