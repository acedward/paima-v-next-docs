"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3681],{162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"home/components/wallets","title":"Wallets","description":"NOTE THIS IS A PREVIEW DOCUMENTATION. NYI.","source":"@site/docs/home/100-components/112-wallets.md","sourceDirName":"home/100-components","slug":"/home/components/wallets","permalink":"/paima-v-next-docs/ja/home/components/wallets","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/112-wallets.md","tags":[],"version":"current","sidebarPosition":112,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Grammar","permalink":"/paima-v-next-docs/ja/home/components/grammar"},"next":{"title":"Randomness","permalink":"/paima-v-next-docs/ja/home/components/randomness"}}');var i=t(3261),a=t(6613);const l={},r="Wallets",c={},o=[{value:"The <code>@paima/wallet</code> Package",id:"the-paimawallet-package",level:2},{value:"AddressType",id:"addresstype",level:2},{value:"Connecting a Wallet in Your Frontend",id:"connecting-a-wallet-in-your-frontend",level:2},{value:"PaimaEngineConfig",id:"paimaengineconfig",level:2},{value:"Primary Uses of a Connected Wallet",id:"primary-uses-of-a-connected-wallet",level:2},{value:"1. Sending Concise Inputs to Paima L2 Contract",id:"1-sending-concise-inputs-to-paima-l2-contract",level:3},{value:"2. Manually Signing Messages for the Batcher",id:"2-manually-signing-messages-for-the-batcher",level:3},{value:"3. Sending On-Chain Transactions",id:"3-sending-on-chain-transactions",level:3},{value:"4. User Identification",id:"4-user-identification",level:3},{value:"4. Signing Messages",id:"4-signing-messages",level:3},{value:"Wallets and the Paima Account System",id:"wallets-and-the-paima-account-system",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"wallets",children:"Wallets"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"NOTE THIS IS A PREVIEW DOCUMENTATION. NYI."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In any decentralized application, the user's wallet is their identity, their key, and their signature. It's the fundamental tool that allows them to interact with the blockchain and prove ownership of their assets and actions."}),"\n",(0,i.jsx)(n.p,{children:"A major challenge in building multi-chain dApps is that every blockchain ecosystem has its own wallet standards and connection methods. Paima Engine solves this problem by providing a single, unified interface that handles the complexity for you."}),"\n",(0,i.jsxs)(n.h2,{id:"the-paimawallet-package",children:["The ",(0,i.jsx)(n.code,{children:"@paima/wallet"})," Package"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@paima/wallet"})," package is the core frontend library for managing user identity. It provides a single, easy-to-use API for connecting to and interacting with a wide variety of blockchain wallets, abstracting away the chain-specific implementation details."]}),"\n",(0,i.jsx)(n.h2,{id:"addresstype",children:"AddressType"}),"\n",(0,i.jsx)(n.p,{children:"This table is a Paima Engine numeric representation of wallet address type. Normally addresses will be used with it's corresponding address type, so the correct cryptographic signer/verifiers can be selected."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Address Type"}),(0,i.jsx)(n.th,{children:"Number"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"EVM"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Cardano"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Substrate"}),(0,i.jsx)(n.td,{children:"2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Algorand"}),(0,i.jsx)(n.td,{children:"3"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Mina"}),(0,i.jsx)(n.td,{children:"4"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Midnight"}),(0,i.jsx)(n.td,{children:"5"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Avail"}),(0,i.jsx)(n.td,{children:"6"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Polkadot"}),(0,i.jsx)(n.td,{children:"7"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"connecting-a-wallet-in-your-frontend",children:"Connecting a Wallet in Your Frontend"}),"\n",(0,i.jsxs)(n.p,{children:["Integrating wallet connectivity into your dApp is streamlined with a single ",(0,i.jsx)(n.code,{children:"login"})," function. You simply specify which type of wallet you want to connect to using the ",(0,i.jsx)(n.code,{children:"WalletMode"})," enum, and the library handles the rest."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { WalletMode, login } from '@paima/wallet';\n\nconst paimaEngineConfig = new PaimaEngineConfig(...); // see PaimaEngineConfig in the @paima/wallets package\n\nasync function connectWallet() {\n  try {\n    // The login function prompts the user with their chosen wallet extension.\n    const loginInfo = await login(WalletMode.EvmInjected);\n\n    // The result contains the wallet client, address, and other info.\n    console.log('Connected Wallet:', loginInfo.walletAddress);\n\n    // Now you can use loginInfo.walletClient to sign messages or transactions.\n    // Example: const signature = await loginInfo.walletClient.signMessage(...);\n  } catch (error) {\n    console.error('Failed to connect wallet:', error);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"WalletMode"})," enum allows you to support a broad range of ecosystems, enabling a truly multi-chain experience:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"WalletMode"})}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Ecosystem"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"EvmInjected"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"EVM"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Standard EVM injected browser wallets. e.g., MetaMask, Phantom, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"EvmEthers"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"EVM"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connect using an EVM Compatible provider instance. e.g., Viem, Ethers, thirdweb Local Wallet, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Cardano"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Cardano"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to Cardano wallets. e.g., Nami, Eternl, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Polkadot"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Polkadot"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to wallets in the Polkadot ecosystem."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Algorand"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Algorand"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to Algorand wallets. e.g., Exodus, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Mina"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Mina"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to the Auro wallet for the Mina Protocol."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AvailJs"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Avail"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to wallets for the Avail network."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Midnight"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Midnight"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to Lace Wallet"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"paimaengineconfig",children:"PaimaEngineConfig"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"PaimaEngineConfig"})," is used to configure the Paima Engine."]}),"\n",(0,i.jsx)(n.p,{children:"Settings:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"App Name"}),": The name of the app, used to internally sign messages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Paima L2 Sync Protocol Name"}),": The name of the paima l2 sync protocol defined in your config."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Paima L2 Contract Address"}),": The address of the paima l2 contract to target."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Paima L2 Chain"}),": The chain of the paima l2 contract."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Paima L2 ABI"}),": (Optional) The abi of the paima l2 contract."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batcher URL"}),": The url of the batcher to use."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prefer Batched Mode"}),": If true use batcher by default, otherwise use self-sequenced transaction."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"PaimaEngineConfig"})," in the ",(0,i.jsx)(n.code,{children:"@paima/wallets"})," package for more details."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const paimaEngineConfig = new PaimaEngineConfig(\n  "my-app",                       // app name\n  "paima-l2-sync-protocol-name",  // paima l2 sync protocol name\n  "0x1234567890abcdef",           // paima l2 contract address\n  hardhat,                        // paima l2 chain\n  undefined,                      // if undefined, use default paima l2 abi\n  "http://localhost:3334",        // batcher url\n  true,                           // if true use batcher by default\n);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"primary-uses-of-a-connected-wallet",children:"Primary Uses of a Connected Wallet"}),"\n",(0,i.jsxs)(n.p,{children:["Once a user has connected their wallet, your frontend can use the returned ",(0,i.jsx)(n.code,{children:"walletClient"})," for different uses."]}),"\n",(0,i.jsx)(n.h3,{id:"1-sending-concise-inputs-to-paima-l2-contract",children:"1. Sending Concise Inputs to Paima L2 Contract"}),"\n",(0,i.jsxs)(n.p,{children:["Send a transaction to the Paima L2 contract.\nThis will automatically decide whether to use the batcher or the self-sequenced transaction based on the ",(0,i.jsx)(n.code,{children:"preferBatchedMode"})," flag."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const conciseInput = ["my-action", "0x1", "0x2"]; // Your grammar-formatted input\nconst result = await sendTransaction(walletClient, conciseInput, paimaEngineConfig);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["See the ",(0,i.jsx)(n.code,{children:"sendTransaction"})," function in the ",(0,i.jsx)(n.code,{children:"@paima/wallets"})," package for more details."]}),"\n",(0,i.jsx)(n.h3,{id:"2-manually-signing-messages-for-the-batcher",children:"2. Manually Signing Messages for the Batcher"}),"\n",(0,i.jsxs)(n.p,{children:["To provide a gasless, cross-chain experience, the user's wallet is used to ",(0,i.jsx)(n.strong,{children:"sign a message"})," containing their game input. This signed message is then sent to the ",(0,i.jsx)(n.a,{href:"/paima-v-next-docs/ja/home/components/batcher",children:"Batcher"}),", which handles the on-chain submission. This is the core mechanism that allows a Cardano user to play a game on an EVM chain without needing an EVM wallet or gas."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const conciseInput = ["my-action", "0x3", "0x4"]; // Your grammar-formatted input\nconst result = await sendBatcherTransaction(walletClient, conciseInput, paimaEngineConfig);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-sending-on-chain-transactions",children:"3. Sending On-Chain Transactions"}),"\n",(0,i.jsx)(n.p,{children:"For specific, high-stakes actions, or if your dApp doesn't use a Batcher, you can use the wallet to send traditional on-chain transactions."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct Paima L2 Contract Interaction"}),": Call the ",(0,i.jsx)(n.code,{children:"submitInput"})," function on the ",(0,i.jsx)(n.code,{children:"PaimaL2Contract"})," to send a game move directly.\nThis can be done using the ",(0,i.jsx)(n.code,{children:"sendSelfSequencedTransaction"})," function."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const result = await sendSelfSequencedTransaction(walletClient, conciseInput, paimaEngineConfig);\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Other Contract Interactions"}),": Call any function on any other smart contract, such as minting an NFT or transferring an ERC20 token."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"4-user-identification",children:"4. User Identification"}),"\n",(0,i.jsxs)(n.p,{children:["The user's ",(0,i.jsx)(n.code,{children:"walletAddress"})," is their primary identifier within the Paima Engine. When your State Machine receives an input, it knows which user performed the action based on the ",(0,i.jsx)(n.code,{children:"signerAddress"}),". This address is used to query the database for the user's state, inventory, and other relevant information."]}),"\n",(0,i.jsx)(n.h3,{id:"4-signing-messages",children:"4. Signing Messages"}),"\n",(0,i.jsx)(n.p,{children:"You can sign custom messages with the wallet."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'const message = "my-message";\nconst signature = await walletClient.signMessage({ message });\n'})}),"\n",(0,i.jsx)(n.h2,{id:"wallets-and-the-paima-account-system",children:"Wallets and the Paima Account System"}),"\n",(0,i.jsxs)(n.p,{children:["A wallet address is not just an identifier; it's also the key to Paima's flexible L2 ",(0,i.jsx)(n.strong,{children:"Account System"}),". While a wallet can act as a standalone identity, it can also be linked to a higher-level Paima Account."]}),"\n",(0,i.jsx)(n.p,{children:'This allows for an "account abstraction" experience where:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A single Paima Account can be controlled by multiple wallet addresses."}),"\n",(0,i.jsx)(n.li,{children:"The primary (controlling) wallet of an account can be changed."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A user manages their account by sending built-in system commands (like ",(0,i.jsx)(n.code,{children:"&linkAddress"}),") to the ",(0,i.jsx)(n.code,{children:"PaimaL2Contract"}),", using their connected wallet to authorize the action with a signature."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/paima-v-next-docs/ja/home/components/accounts",children:"Learn more about the Paima Account System"})})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6613:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(9593);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);