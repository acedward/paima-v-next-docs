"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7951],{5405:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"home/chains/midnight","title":"Midnight","description":"Midnight is a privacy-focused blockchain that uses Zero-Knowledge Proofs (ZKPs) to enable secure, confidential decentralized applications. Integrating Midnight allows your Paima dApp to leverage powerful privacy features, such as:","source":"@site/docs/home/200-chains/202-midnight.md","sourceDirName":"home/200-chains","slug":"/home/chains/midnight","permalink":"/paima-v-next-docs/ja/home/chains/midnight","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/200-chains/202-midnight.md","tags":[],"version":"current","sidebarPosition":202,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"EVM-Compatible Chains","permalink":"/paima-v-next-docs/ja/home/chains/evm"},"next":{"title":"Cardano","permalink":"/paima-v-next-docs/ja/home/chains/cardano"}}');var s=i(3261),a=i(6613);const r={},o="Midnight",c={},d=[{value:"How Midnight Works: An Overview",id:"how-midnight-works-an-overview",level:3},{value:"Paima Engine&#39;s Role in the Midnight Ecosystem",id:"paima-engines-role-in-the-midnight-ecosystem",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Supported Primitives",id:"supported-primitives",level:3},{value:"Contract Development",id:"contract-development",level:3},{value:"Local Development Setup",id:"local-development-setup",level:3}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"midnight",children:"Midnight"})}),"\n",(0,s.jsxs)(n.p,{children:["Midnight is a ",(0,s.jsx)(n.strong,{children:"privacy-focused blockchain"})," that uses Zero-Knowledge Proofs (ZKPs) to enable secure, confidential decentralized applications. Integrating Midnight allows your Paima dApp to leverage powerful privacy features, such as:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Private State"}),": Keep user data and application logic confidential."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Confidential Transactions"}),": Execute transactions without revealing their details on-chain."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Verifiable Computation"}),": Run complex logic off-chain and prove its correct execution on-chain without revealing the inputs."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"how-midnight-works-an-overview",children:"How Midnight Works: An Overview"}),"\n",(0,s.jsx)(n.p,{children:"Midnight's architecture is modular, separating the user's private data from the public blockchain. The key components are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User & Wallet"}),": Interacts with the dApp. The wallet manages keys and signs transactions, but sensitive data never leaves the user's device."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proof Server"}),": A local service that generates the ZK proofs required for private transactions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Node"}),": The core blockchain client that validates transactions by verifying their ZK proofs and maintains the public ledger."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Indexer"}),": A service that tracks the public blockchain data, making it easily queryable for dApps."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Smart Contracts (Compact)"}),": Contracts are written in Compact, a language designed for ZK. They define private logic (circuits) and can expose a ",(0,s.jsxs)(n.strong,{children:["public ",(0,s.jsx)(n.code,{children:"ledger"})," state"]}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"paima-engines-role-in-the-midnight-ecosystem",children:"Paima Engine's Role in the Midnight Ecosystem"}),"\n",(0,s.jsxs)(n.p,{children:["Paima Engine acts as a powerful off-chain indexer and state machine that ",(0,s.jsx)(n.strong,{children:"monitors the public state"})," of Midnight contracts. It does not handle private data or proof generation. Instead, it observes the ",(0,s.jsx)(n.em,{children:"results"})," of private computations that are made public on the Midnight ledger."]}),"\n",(0,s.jsx)(n.p,{children:"This allows you to build complex dApps that combine the privacy of Midnight with the multi-chain data aggregation and deterministic logic of Paima Engine."}),"\n",(0,s.jsx)(n.mermaid,{value:"graph TD\n    subgraph Paima Engine\n        PaimaSync[Sync Service] --\x3e PaimaSM[State Machine]\n    end\n\n    subgraph User's Machine\n        A[User/Frontend] --\x3e B{Wallet};\n        B --\x3e C[Proof Server];\n    end\n\n    subgraph Midnight Network\n        D[Midnight Node] --\x3e E[Indexer];\n    end\n\n    C -- ZK Proof --\x3e B;\n    B -- Signed TX with Proof --\x3e D;\n    E -- Fetches Public State --\x3e PaimaSync;\n\n   "}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["Connecting Paima Engine to a Midnight network is a two-step process in your ",(0,s.jsx)(n.code,{children:"config.ts"})," file."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Network Definition (",(0,s.jsx)(n.code,{children:"buildNetworks"}),")"]}),":\nFirst, you define the connection details for the Midnight network."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'.buildNetworks(builder =>\n  builder.addNetwork({\n    name: "midnight",\n    type: ConfigNetworkType.MIDNIGHT,\n    genesisHash: "0x...",\n    networkId: 0, // 0 for local test node\n    nodeUrl: "http://127.0.0.1:9944",\n  })\n)\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Sync Protocol Definition (",(0,s.jsx)(n.code,{children:"buildSyncProtocols"}),")"]}),":\nNext, you tell the engine ",(0,s.jsx)(n.em,{children:"how"})," to sync from Midnight by adding a ",(0,s.jsx)(n.code,{children:"MIDNIGHT_PARALLEL"})," protocol. This protocol connects to the ",(0,s.jsx)(n.strong,{children:"Midnight Indexer"})," to efficiently query for state changes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'.addParallel(\n  (networks) => networks.midnight,\n  (network, deployments) => ({\n    name: "parallelMidnight",\n    type: ConfigSyncProtocolType.MIDNIGHT_PARALLEL,\n    startBlockHeight: 1,\n    pollingInterval: 1000,\n    indexer: "http://127.0.0.1:8088/api/v1/graphql",\n  }),\n)\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"supported-primitives",children:"Supported Primitives"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"MidnightContractState"})}),": This is the primary primitive for Midnight. Unlike EVM primitives that listen for events, this one monitors the ",(0,s.jsxs)(n.strong,{children:["public ",(0,s.jsx)(n.code,{children:"ledger"})," state"]})," of a ZK contract. When a private transaction causes a change to this public state, the primitive triggers and sends the updated state data to your State Transition Function (STF)."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"contract-development",children:"Contract Development"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Language"}),": Compact (a TypeScript-inspired DSL for ZK)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Compilation"}),": ",(0,s.jsx)(n.code,{children:"deno task build:midnight"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["A Midnight contract defines private state transitions (",(0,s.jsx)(n.code,{children:"circuits"}),") and can choose to expose certain data publicly in its ",(0,s.jsx)(n.code,{children:"ledger"}),". Paima Engine can only see what is in the public ",(0,s.jsx)(n.code,{children:"ledger"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["Example (",(0,s.jsx)(n.code,{children:"main.rs"}),"):"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"pragma language_version 0.16;\n\nimport CompactStandardLibrary;\n\n// This is the public state that Paima Engine's primitive will monitor.\nexport ledger round: Counter;\n\n// This is a private state transition. When executed, it generates a ZK proof.\n// Its effect is made visible to Paima by the change it causes to the public `round` state.\nexport circuit increment(): [] {\n  round.increment(1);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"local-development-setup",children:"Local Development Setup"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"launchMidnight"})," function (",(0,s.jsx)(n.code,{children:"@paima/orchestrator/start-midnight"}),") automates your entire local Midnight environment. When included in your ",(0,s.jsx)(n.code,{children:"orchestrator.ts"}),", it will start the Midnight local node, the indexer, the proof server, and any other necessary services, ensuring a seamless development experience."]}),"\n",(0,s.jsxs)(n.p,{children:["This is the example launcher for Midnight for the ",(0,s.jsx)(n.a,{href:"/paima-v-next-docs/ja/home/components/processes",children:"Process Orchestrator"}),"\nNormally this should be enough for must use cases, but you can edit it to your own need.s"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'export const launchMidnight = (packageName: string) => ({\n  stopProcessAtPort: [9944, 8088, 6300],\n  processes: [\n    {\n      name: ComponentNames.MIDNIGHT_NODE,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-node:start",\n      ],\n      logs: "none",\n      waitToExit: false,\n      type: "system-dependency",\n    },\n    {\n      name: ComponentNames.MIDNIGHT_INDEXER,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-indexer:start",\n      ],\n      waitToExit: false,\n      type: "system-dependency",\n    },\n    {\n      name: ComponentNames.MIDNIGHT_PROOF_SERVER,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-proof-server:start",\n      ],\n      waitToExit: false,\n      type: "system-dependency",\n    },\n    {\n      name: ComponentNames.MIDNIGHT_NODE_WAIT,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-node:wait",\n      ],\n    },\n    {\n      name: ComponentNames.MIDNIGHT_INDEXER_WAIT,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-indexer:wait",\n      ],\n    },\n    {\n      name: ComponentNames.MIDNIGHT_PROOF_SERVER_WAIT,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-proof-server:wait",\n      ],\n    },\n    {\n      name: ComponentNames.MIDNIGHT_CONTRACT,\n      args: [\n        "task",\n        "-f",\n        packageName,\n        "midnight-contract:deploy",\n      ],\n    },\n  ],\n});\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},6613:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(9593);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);