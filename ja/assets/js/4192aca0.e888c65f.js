"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5372],{963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"home/components/explorer","title":"Paima Explorer","description":"The Paima Explorer is a powerful, locally-run web application that serves as an essential companion for developing with Paima Engine. It provides a real-time, interactive window into your running Paima Engine node, allowing you to monitor its health, inspect its state, and explore its data without needing to write a single line of SQL.","source":"@site/docs/home/100-components/107-explorer.md","sourceDirName":"home/100-components","slug":"/home/components/explorer","permalink":"/ja/home/components/explorer","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/107-explorer.md","tags":[],"version":"current","sidebarPosition":107,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Process Orchestrator","permalink":"/ja/home/components/processes"},"next":{"title":"Batcher","permalink":"/ja/home/components/batcher"}}');var a=t(3261),o=t(6613);const s={},r="Paima Explorer",l={},c=[{value:"Running the Explorer",id:"running-the-explorer",level:3},{value:"Key Features",id:"key-features",level:3},{value:"1. Dashboard: Sync Status &amp; Chain Health",id:"1-dashboard-sync-status--chain-health",level:4},{value:"2. Exploring State Tables",id:"2-exploring-state-tables",level:4},{value:"3. Accounts and Addresses",id:"3-accounts-and-addresses",level:4},{value:"4. Interactive API Documentation",id:"4-interactive-api-documentation",level:4}];function d(e){const n={a:"a",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"paima-explorer",children:"Paima Explorer"})}),"\n",(0,a.jsx)(n.p,{children:"The Paima Explorer is a powerful, locally-run web application that serves as an essential companion for developing with Paima Engine. It provides a real-time, interactive window into your running Paima Engine node, allowing you to monitor its health, inspect its state, and explore its data without needing to write a single line of SQL."}),"\n",(0,a.jsx)(n.p,{children:"Think of it as a block explorer and a database admin panel rolled into one, specifically designed for your Paima dApp."}),"\n",(0,a.jsx)(n.h3,{id:"running-the-explorer",children:"Running the Explorer"}),"\n",(0,a.jsxs)(n.p,{children:["The Paima Explorer is typically launched automatically as part of the local development environment when you run ",(0,a.jsx)(n.code,{children:"deno task dev"}),". It is configured within the ",(0,a.jsx)(n.code,{children:"processesToLaunch"})," section of your ",(0,a.jsx)(n.code,{children:"orchestrator.ts"})," file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// In your orchestrator.ts\n{\n  processes: [\n    {\n      name: "explorer",\n      args: ["run", "-A", "--unstable-detect-cjs", "@paima/explorer"],\n      waitToExit: false,\n      type: "system-dependency",\n      link: "http://localhost:10590",\n    },\n  ],\n},\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Once running, you can access it at the URL provided in the console, usually ",(0,a.jsx)(n.code,{children:"http://localhost:10590"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,a.jsx)(n.p,{children:"The Explorer is organized into several key sections, each providing a unique view into your node's operations."}),"\n",(0,a.jsx)(n.h4,{id:"1-dashboard-sync-status--chain-health",children:"1. Dashboard: Sync Status & Chain Health"}),"\n",(0,a.jsx)(n.p,{children:"The main dashboard gives you an at-a-glance overview of your node's health and the status of its connections to various blockchains."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Main L2 Chain Blocks"}),': Displays the current block height of your Paima Engine\'s internal clock (the Main NTP Protocol). This shows you the current "tick" or state of your application.']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Parallel Chains"}),": For each connected parallel chain (EVM, Midnight, Cardano, etc.), it shows the last block height synced by the node. This is crucial for debugging and ensuring that your node is successfully ingesting data from all its sources."]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"2-exploring-state-tables",children:"2. Exploring State Tables"}),"\n",(0,a.jsx)(n.p,{children:"This is the most powerful feature of the Explorer. It gives you a direct, read-only view into the PostgreSQL database that stores your application's state, without needing a separate database client. The tables are intelligently categorized."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Dynamic (Primitive) Tables"}),": These tables are ",(0,a.jsx)(n.strong,{children:"automatically created and managed by Paima Engine"})," to represent the state of your configured Primitives. For example, if you have an ",(0,a.jsx)(n.code,{children:"ERC20"})," primitive, the Explorer will show a table named ",(0,a.jsx)(n.code,{children:"erc20_balances_view_<primitive_name>"})," that contains the real-time token balance for every wallet address. This is incredibly useful for verifying that your primitives are working correctly."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Custom Tables"}),": These are the tables that ",(0,a.jsx)(n.strong,{children:"you defined"}),' in your custom SQL "migration" files. This section allows you to inspect the data specific to your dApp\'s logic. You can see your ',(0,a.jsx)(n.code,{children:"players"}),", ",(0,a.jsx)(n.code,{children:"games"}),", ",(0,a.jsx)(n.code,{children:"inventories"}),", or any other custom table to confirm that your State Transition Functions (STFs) are writing the correct data."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"3-accounts-and-addresses",children:"3. Accounts and Addresses"}),"\n",(0,a.jsxs)(n.p,{children:["This section provides a user-friendly interface to view the state of the Paima L2 ",(0,a.jsx)(n.a,{href:"/ja/home/components/accounts",children:"Account System"}),". You can:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"See a list of all created Paima Accounts."}),"\n",(0,a.jsx)(n.li,{children:"View which wallet addresses are linked to each account."}),"\n",(0,a.jsx)(n.li,{children:"Identify which address is the current primary (controlling) wallet for an account."}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"4-interactive-api-documentation",children:"4. Interactive API Documentation"}),"\n",(0,a.jsxs)(n.p,{children:["The Explorer hosts the live ",(0,a.jsx)(n.strong,{children:"OpenAPI (Swagger) documentation"})," for your node's API. This is an interactive tool that allows you to:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"See all available API endpoints, including built-in system endpoints, your own custom endpoints, and the Batcher API."}),"\n",(0,a.jsx)(n.li,{children:"View the request parameters and expected response schemas for each endpoint."}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Execute API calls directly from your browser"}),", making it an invaluable tool for testing your API without needing to write any frontend code."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},6613:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(9593);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);