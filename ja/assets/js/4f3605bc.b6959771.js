"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4022],{6404:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(9593);const i={},c=s.createContext(i);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(c.Provider,{value:n},e.children)}},7225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"home/components/sync-service","title":"Sync Service & Chain Config","description":"This is the main Paima Engine service, it syncs the different blockchains, scans and captures the events, calls, executes the state machine.","source":"@site/docs/home/100-components/101-sync-service.md","sourceDirName":"home/100-components","slug":"/home/components/sync-service","permalink":"/paima-v-next-docs/ja/home/components/sync-service","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/101-sync-service.md","tags":[],"version":"current","sidebarPosition":101,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Paima Engine Components","permalink":"/paima-v-next-docs/ja/home/components/"},"next":{"title":"State Machine","permalink":"/paima-v-next-docs/ja/home/components/state-machine"}}');var i=t(3261),c=t(6404);const o={},r="Sync Service & Chain Config",a={},d=[];function m(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sync-service--chain-config",children:"Sync Service & Chain Config"})}),"\n",(0,i.jsxs)(n.p,{children:["This is the main ",(0,i.jsx)(n.code,{children:"Paima Engine"})," service, it syncs the different blockchains, scans and captures the events, calls, executes the state machine."]}),"\n",(0,i.jsx)(n.p,{children:"This service is setup by the Chain & Contracts configuration."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'export const localhostConfig = new ConfigBuilder()\n  .setNamespace(builder => builder.setSecurityNamespace("my-app-track-erc721"))\n  .buildNetworks(builder => \n    builder.addViemNetwork({\n        ...hardhat,\n        name: "evmMain",\n    })\n  )\n  .buildSyncProtocols(builder =>\n   builder.addMain(\n        (networks) => networks.evmMain, \n        (network, deployments) => ({\n            name: "mainEvmRPC",\n            type: ConfigSyncProtocolType.EVM_RPC_MAIN,\n            chainUri: network.rpcUrls.default.http[0],\n            startBlockHeight: 1,\n            pollingInterval: 500,\n        })\n    )\n  )\n  .buildPrimitives(builder =>\n    builder.addPrimitive(\n        (syncProtocols) => syncProtocols.mainEvmRPC,\n        (network, deployments, syncProtocol) => ({\n          name: "Track-ERC721",\n          type: ConfigPrimitiveType.EvmRpcERC721,\n          startBlockHeight: 0,\n          contractAddress:\n            contractAddressesEvmMain().chain31337["Erc721DevModule#Erc721Dev"],\n          abi: getEvmEvent(\n            erc721dev.abi,\n            "Transfer(address,address,uint256)",\n          ),\n          scheduledPrefix: "transfer-assets",\n        })\n    )\n  )\n  .build();\n'})})]})}function l(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}}}]);