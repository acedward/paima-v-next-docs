"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7951],{5405:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"home/chains/midnight","title":"Midnight","description":"Midnight is a Zero-Knowledge (ZK) powered blockchain designed for privacy and verifiable computation. Integrating with Midnight allows your Paima dApp to incorporate private state, confidential transactions, and complex logic that would be too expensive or impossible to run on a public chain.","source":"@site/docs/home/200-chains/202-midnight.md","sourceDirName":"home/200-chains","slug":"/home/chains/midnight","permalink":"/paima-v-next-docs/home/chains/midnight","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/200-chains/202-midnight.md","tags":[],"version":"current","sidebarPosition":202,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"EVM-Compatible Chains","permalink":"/paima-v-next-docs/home/chains/evm"},"next":{"title":"Cardano","permalink":"/paima-v-next-docs/home/chains/cardano"}}');var o=i(3261),r=i(6404);const s={},a="Midnight",d={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Supported Primitives",id:"supported-primitives",level:2},{value:"Contract Development",id:"contract-development",level:2},{value:"Local Development Setup",id:"local-development-setup",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"midnight",children:"Midnight"})}),"\n",(0,o.jsx)(n.p,{children:"Midnight is a Zero-Knowledge (ZK) powered blockchain designed for privacy and verifiable computation. Integrating with Midnight allows your Paima dApp to incorporate private state, confidential transactions, and complex logic that would be too expensive or impossible to run on a public chain."}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:["Network Definition (",(0,o.jsx)(n.code,{children:"buildNetworks"}),")"]}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'.buildNetworks(builder =>\n  builder.addNetwork({\n    name: "midnight",\n    type: ConfigNetworkType.MIDNIGHT,\n    genesisHash: "0x...",\n    networkId: 0, // 0 for local test node\n    nodeUrl: "http://127.0.0.1:9944",\n  })\n)\n'})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsxs)(n.strong,{children:["Sync Protocol Definition (",(0,o.jsx)(n.code,{children:"buildSyncProtocols"}),")"]}),":\nThe protocol type is ",(0,o.jsx)(n.code,{children:"MIDNIGHT_PARALLEL"}),", which connects to a Midnight Indexer service."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'.addParallel(\n  (networks) => networks.midnight,\n  (network, deployments) => ({\n    name: "parallelMidnight",\n    type: ConfigSyncProtocolType.MIDNIGHT_PARALLEL,\n    startBlockHeight: 1,\n    pollingInterval: 1000,\n    indexer: "http://127.0.0.1:8088/api/v1/graphql",\n  }),\n)\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"supported-primitives",children:"Supported Primitives"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"MidnightContractState"})}),": The primary primitive for Midnight. It does not watch for events, but instead monitors the public ",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"ledger"})," state"]})," of a ZK contract. When this public state changes, the primitive triggers and sends the updated state to your STF."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"contract-development",children:"Contract Development"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Language"}),": A specialized, Rust-like language for writing ZK circuits."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Compilation"}),": ",(0,o.jsx)(n.code,{children:"deno task build:midnight"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"local-development-setup",children:"Local Development Setup"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"launchMidnight"})," function (",(0,o.jsx)(n.code,{children:"@paima/orchestrator/start-midnight"}),") orchestrates your local Midnight environment. It typically starts the Midnight local node, the indexer, and other necessary services."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},6404:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(9593);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);