"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7805],{4266:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"home/paima-standards/prc4","title":"PRC-5: Paima Inverse Projection Interface for ERC1155","description":"Core Idea*: An adaptation of the PRC-3 Inverse Projection standard specifically for semi-fungible tokens, using the ERC1155 standard.","source":"@site/docs/home/400-paima-standards/prc4.md","sourceDirName":"home/400-paima-standards","slug":"/home/paima-standards/prc4","permalink":"/paima-v-next-docs/home/paima-standards/prc4","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/400-paima-standards/prc4.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"PRC-3: Paima Inverse Projection Interface (NFTs)","permalink":"/paima-v-next-docs/home/paima-standards/prc3"},"next":{"title":"Architecture","permalink":"/paima-v-next-docs/home/paima-engine/"}}');var s=t(3261),r=t(6404);const i={},o="PRC-5: Paima Inverse Projection Interface for ERC1155",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"prc-5-paima-inverse-projection-interface-for-erc1155",children:"PRC-5: Paima Inverse Projection Interface for ERC1155"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Core Idea"}),": An adaptation of the PRC-3 Inverse Projection standard specifically for semi-fungible tokens, using the ERC1155 standard."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Problem Solved"}),": PRC-3 is designed for unique, non-fungible assets. Many in-game items, like crafting materials, gold, or potions, are fungible or semi-fungible. PRC-5 provides a standard way to represent these L2 assets as tradable ERC1155 tokens on an L1."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"How it Works (High Level)"}),": The mechanism is nearly identical to PRC-3, but the L1 smart contract is an ERC1155-compliant contract. This means the minting process and metadata are designed to handle quantities. For example, a user can project 1000 units of in-game gold into a single ERC1155 token with a quantity of 1000 on the L1."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Components"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"IInverseProjected1155"})," (Solidity)"]}),": A modified ERC1155 interface."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Amount Tracking"}),": The contract and metadata are designed to handle token quantities, a core feature of the ERC1155 standard."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch Operations"}),": Supports standard ERC1155 functions like ",(0,s.jsx)(n.code,{children:"burnBatch"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Partial Initialization Logic"}),": The specification accounts for scenarios where a user mints a different quantity on the L1 than what they locked on the L2."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},6404:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(9593);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);