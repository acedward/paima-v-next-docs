"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3681],{162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"home/components/wallets","title":"Wallets","description":"NOTE THIS IS A PREVIEW DOCUMENTATION. NYI.","source":"@site/docs/home/100-components/112-wallets.md","sourceDirName":"home/100-components","slug":"/home/components/wallets","permalink":"/paima-v-next-docs/home/components/wallets","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/112-wallets.md","tags":[],"version":"current","sidebarPosition":112,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Grammar","permalink":"/paima-v-next-docs/home/components/grammar"},"next":{"title":"Randomness","permalink":"/paima-v-next-docs/home/components/randomness"}}');var i=t(3261),l=t(6404);const a={},o="Wallets",r={},c=[{value:"The <code>@paima/wallet</code> Package",id:"the-paimawallet-package",level:3},{value:"Connecting a Wallet in Your Frontend",id:"connecting-a-wallet-in-your-frontend",level:3},{value:"Primary Uses of a Connected Wallet",id:"primary-uses-of-a-connected-wallet",level:3},{value:"1. Signing Messages for the Batcher (Recommended)",id:"1-signing-messages-for-the-batcher-recommended",level:4},{value:"2. Sending On-Chain Transactions",id:"2-sending-on-chain-transactions",level:4},{value:"3. User Identification",id:"3-user-identification",level:4},{value:"Wallets and the Paima Account System",id:"wallets-and-the-paima-account-system",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"wallets",children:"Wallets"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"NOTE THIS IS A PREVIEW DOCUMENTATION. NYI."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In any decentralized application, the user's wallet is their identity, their key, and their signature. It's the fundamental tool that allows them to interact with the blockchain and prove ownership of their assets and actions."}),"\n",(0,i.jsx)(n.p,{children:"A major challenge in building multi-chain dApps is that every blockchain ecosystem has its own wallet standards and connection methods. Paima Engine solves this problem by providing a single, unified interface that handles the complexity for you."}),"\n",(0,i.jsxs)(n.h3,{id:"the-paimawallet-package",children:["The ",(0,i.jsx)(n.code,{children:"@paima/wallet"})," Package"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@paima/wallet"})," package is the core frontend library for managing user identity. It provides a single, easy-to-use API for connecting to and interacting with a wide variety of blockchain wallets, abstracting away the chain-specific implementation details."]}),"\n",(0,i.jsx)(n.h3,{id:"connecting-a-wallet-in-your-frontend",children:"Connecting a Wallet in Your Frontend"}),"\n",(0,i.jsxs)(n.p,{children:["Integrating wallet connectivity into your dApp is streamlined with a single ",(0,i.jsx)(n.code,{children:"login"})," function. You simply specify which type of wallet you want to connect to using the ",(0,i.jsx)(n.code,{children:"WalletMode"})," enum, and the library handles the rest."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { WalletMode, login } from '@paima/wallet';\n\nasync function connectWallet() {\n  try {\n    // The login function prompts the user with their chosen wallet extension.\n    const loginInfo = await login(WalletMode.EvmInjected);\n\n    // The result contains the wallet client, address, and other info.\n    console.log('Connected Wallet:', loginInfo.walletAddress);\n\n    // Now you can use loginInfo.walletClient to sign messages or transactions.\n    // Example: const signature = await loginInfo.walletClient.signMessage(...);\n  } catch (error) {\n    console.error('Failed to connect wallet:', error);\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"WalletMode"})," enum allows you to support a broad range of ecosystems, enabling a truly multi-chain experience:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"WalletMode"})}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Ecosystem"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"EvmInjected"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"EVM"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Standard injected browser wallets (MetaMask, Rabby, etc.)."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"EvmEthers"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"EVM"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connect using an Ethers.js provider instance."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Cardano"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Cardano"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to Cardano wallets like Nami, Eternl, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Polkadot"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Polkadot"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to wallets in the Polkadot ecosystem."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Algorand"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Algorand"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to Algorand wallets."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"Mina"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Mina"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to the Auro wallet for the Mina Protocol."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"AvailJs"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Avail"}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Connects to wallets for the Avail network."})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"primary-uses-of-a-connected-wallet",children:"Primary Uses of a Connected Wallet"}),"\n",(0,i.jsxs)(n.p,{children:["Once a user has connected their wallet, your frontend can use the returned ",(0,i.jsx)(n.code,{children:"walletClient"})," to perform three main types of actions."]}),"\n",(0,i.jsx)(n.h4,{id:"1-signing-messages-for-the-batcher-recommended",children:"1. Signing Messages for the Batcher (Recommended)"}),"\n",(0,i.jsxs)(n.p,{children:["This is the most common and powerful use case. To provide a gasless, cross-chain experience, the user's wallet is used to ",(0,i.jsx)(n.strong,{children:"sign a message"})," containing their game input. This signed message is then sent to the ",(0,i.jsx)(n.a,{href:"/paima-v-next-docs/home/components/batcher",children:"Batcher"}),", which handles the on-chain submission. This is the core mechanism that allows a Cardano user to play a game on an EVM chain without needing an EVM wallet or gas."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Using the walletClient obtained from the login() function.\nconst signature = await walletClient.signMessage({\n  message: createMessageForBatcher(\n    "my-namespace",\n    timestamp,\n    userAddress,\n    gameInput\n  ),\n});\n'})}),"\n",(0,i.jsx)(n.h4,{id:"2-sending-on-chain-transactions",children:"2. Sending On-Chain Transactions"}),"\n",(0,i.jsx)(n.p,{children:"For specific, high-stakes actions, or if your dApp doesn't use a Batcher, you can use the wallet to send traditional on-chain transactions."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct Paima L2 Contract Interaction"}),": Call the ",(0,i.jsx)(n.code,{children:"submitInput"})," function on the ",(0,i.jsx)(n.code,{children:"PaimaL2Contract"})," to send a game move directly."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Other Contract Interactions"}),": Call any function on any other smart contract, such as minting an NFT or transferring an ERC20 token."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-user-identification",children:"3. User Identification"}),"\n",(0,i.jsxs)(n.p,{children:["The user's ",(0,i.jsx)(n.code,{children:"walletAddress"})," is their primary identifier within the Paima Engine. When your State Machine receives an input, it knows which user performed the action based on the ",(0,i.jsx)(n.code,{children:"signerAddress"}),". This address is used to query the database for the user's state, inventory, and other relevant information."]}),"\n",(0,i.jsx)(n.h3,{id:"wallets-and-the-paima-account-system",children:"Wallets and the Paima Account System"}),"\n",(0,i.jsxs)(n.p,{children:["A wallet address is not just an identifier; it's also the key to Paima's flexible L2 ",(0,i.jsx)(n.strong,{children:"Account System"}),". While a wallet can act as a standalone identity, it can also be linked to a higher-level Paima Account."]}),"\n",(0,i.jsx)(n.p,{children:'This allows for an "account abstraction" experience where:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"A single Paima Account can be controlled by multiple wallet addresses."}),"\n",(0,i.jsx)(n.li,{children:"The primary (controlling) wallet of an account can be changed."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A user manages their account by sending built-in system commands (like ",(0,i.jsx)(n.code,{children:"&linkAddress"}),") to the ",(0,i.jsx)(n.code,{children:"PaimaL2Contract"}),", using their connected wallet to authorize the action with a signature."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/paima-v-next-docs/home/components/accounts",children:"Learn more about the Paima Account System"})})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(9593);const i={},l=s.createContext(i);function a(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);