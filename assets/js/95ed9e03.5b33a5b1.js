"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5855],{5861:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"home/components/processes","title":"Process Orchestrator","description":"Developing a multi-chain dApp is complex. It often requires running multiple local blockchains, indexers, deploying contracts, and managing various services simultaneously. Doing this manually is tedious, error-prone, and slows down development.","source":"@site/docs/home/100-components/106-processes.md","sourceDirName":"home/100-components","slug":"/home/components/processes","permalink":"/paima-v-next-docs/home/components/processes","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/106-processes.md","tags":[],"version":"current","sidebarPosition":106,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Contracts","permalink":"/paima-v-next-docs/home/components/contracts"},"next":{"title":"Paima Explorer","permalink":"/paima-v-next-docs/home/components/explorer"}}');var o=t(3261),r=t(6404);const a={},i="Process Orchestrator",c={},l=[{value:"How It Works",id:"how-it-works",level:3},{value:"Configuring the Orchestrator (<code>orchestrator.ts</code>)",id:"configuring-the-orchestrator-orchestratorts",level:3},{value:"1. Built-in Paima Services (<code>processes</code>)",id:"1-built-in-paima-services-processes",level:4},{value:"2. Custom Process Groups (<code>processesToLaunch</code>)",id:"2-custom-process-groups-processestolaunch",level:4},{value:"3. Batcher Configuration (<code>batcher</code>)",id:"3-batcher-configuration-batcher",level:4},{value:"Full Example Walkthrough",id:"full-example-walkthrough",level:3}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"process-orchestrator",children:"Process Orchestrator"})}),"\n",(0,o.jsx)(n.p,{children:"Developing a multi-chain dApp is complex. It often requires running multiple local blockchains, indexers, deploying contracts, and managing various services simultaneously. Doing this manually is tedious, error-prone, and slows down development."}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"Process Orchestrator"})," is a powerful tool built into Paima Engine that solves this problem. It automates the setup of your entire local development environment. When you run ",(0,o.jsx)(n.code,{children:"deno task dev"})," in the ",(0,o.jsx)(n.code,{children:"/templates/evm-midnight/"})," example, the orchestrator reads a configuration file (",(0,o.jsx)(n.code,{children:"start.ts"}),") and launches all the necessary processes\u2014from blockchains and databases to the batcher and frontend server\u2014in the correct order."]}),"\n",(0,o.jsx)(n.p,{children:'Its main goal is to create a complete, "mini-production" environment on your machine, so you can focus on building your dApp, not on managing infrastructure.'}),"\n",(0,o.jsx)(n.h3,{id:"how-it-works",children:"How It Works"}),"\n",(0,o.jsx)(n.p,{children:"The orchestrator is the main entry point for your development environment. When started, it performs the following steps:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:["Reads ",(0,o.jsx)(n.code,{children:"start.ts"})]}),": It loads your configuration, which defines all the processes to run."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Launches Dependencies"}),": It starts foundational services like local blockchains (EVM, Midnight, etc.) and the development database. It can be configured to wait for each process to be ready before proceeding to the next step."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Deploys Contracts"}),": Once the chains are running, it executes your deployment scripts."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Starts Paima Services"}),": It launches core Paima services like the Batcher and the log collector."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Starts the Sync Service"}),": Once the entire environment is successfully set up, the orchestrator starts the main ",(0,o.jsx)(n.strong,{children:"Paima Sync Service"}),". The Sync Service then loads its own configuration (",(0,o.jsx)(n.code,{children:"config.ts"}),") and begins the actual process of syncing blockchain data and running your state machine."]}),"\n"]}),"\n",(0,o.jsxs)(n.h3,{id:"configuring-the-orchestrator-orchestratorts",children:["Configuring the Orchestrator (",(0,o.jsx)(n.code,{children:"orchestrator.ts"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"Your entire development environment is defined in a single configuration object. Let's break down its main components."}),"\n",(0,o.jsxs)(n.h4,{id:"1-built-in-paima-services-processes",children:["1. Built-in Paima Services (",(0,o.jsx)(n.code,{children:"processes"}),")"]}),"\n",(0,o.jsx)(n.p,{children:"This section is a set of boolean flags to enable or disable core Paima development services."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:"const config = Value.Parse(OrchestratorConfig, {\n  processes: {\n    // Starts an in-memory PostgreSQL database for development.\n    [ComponentNames.PAIMA_PGLITE]: true,\n\n    // Starts a local OpenTelemetry collector to aggregate logs.\n    [ComponentNames.COLLECTOR]: true,\n\n    // Starts the Paima Batcher service.\n    [ComponentNames.PAIMA_BATCHER]: true,\n  },\n  // ...\n});\n"})}),"\n",(0,o.jsxs)(n.h4,{id:"2-custom-process-groups-processestolaunch",children:["2. Custom Process Groups (",(0,o.jsx)(n.code,{children:"processesToLaunch"}),")"]}),"\n",(0,o.jsx)(n.p,{children:'This is where you define the custom tasks needed to set up your specific dApp environment. It\'s an array of process "groups," where each group can contain one or more sequential steps.'}),"\n",(0,o.jsx)(n.p,{children:"This is commonly used to:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Start a local blockchain."}),"\n",(0,o.jsx)(n.li,{children:"Wait for the chain to be ready."}),"\n",(0,o.jsx)(n.li,{children:"Deploy your smart contracts."}),"\n",(0,o.jsx)(n.li,{children:"Build and run a frontend application."}),"\n"]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"IMPORTANT: Example EVM / Midnight / Cardano / Avail examples are available in the @paima/orchestrator package"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'import { launchAvail } from "@paima/orchestrator/start-avail";\nimport { launchCardano } from "@paima/orchestrator/start-cardano";\nimport { launchEvm } from "@paima/orchestrator/start-evm";\nimport { launchMidnight } from "@paima/orchestrator/start-midnight";\n'})}),"\n",(0,o.jsx)(n.p,{children:"But you can write your own, here is an example of a reusable launcher function for an EVM chain. Notice how it defines a sequence of processes."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// This function returns a configuration object for a process group.\nexport const launchEvm = (packageName: string) => ({\n  // A list of ports to clear before starting.\n  stopProcessAtPort: [8545],\n  processes: [\n    {\n      // Step 1: Start the Hardhat EVM chain (a long-running service).\n      name: ComponentNames.HARDHAT,\n      args: ["task", "-f", packageName, "chain:start"],\n      waitToExit: false, // Don\'t wait, let it run in the background.\n    },\n    {\n      // Step 2: Wait until the chain is responsive.\n      name: ComponentNames.HARDHAT_WAIT,\n      args: ["task", "-f", packageName, "chain:wait"],\n      // waitToExit is true by default, so the orchestrator pauses here.\n    },\n    {\n      // Step 3: Deploy contracts. This only runs after the wait step completes.\n      name: ComponentNames.DEPLOY_EVM_CONTRACTS,\n      args: ["task", "-f", packageName, "deploy"],\n    },\n  ],\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This demonstrates the key property of ",(0,o.jsx)(n.code,{children:"waitToExit"}),", which allows you to define dependencies between steps."]}),"\n",(0,o.jsxs)(n.h4,{id:"3-batcher-configuration-batcher",children:["3. Batcher Configuration (",(0,o.jsx)(n.code,{children:"batcher"}),")"]}),"\n",(0,o.jsxs)(n.p,{children:["If you enable ",(0,o.jsx)(n.code,{children:"PAIMA_BATCHER"})," in the ",(0,o.jsx)(n.code,{children:"processes"})," section, you must also provide this configuration block. It tells the Batcher service which L2 contract to submit inputs to and what wallet to use for sending transactions."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'  batcher: {\n    // The address of your deployed PaimaL2Contract.\n    paimaL2Address: "0x...",\n\n    // A private key for a dev wallet funded by the local Hardhat node.\n    batcherPrivateKey: "0x59c69...",\n\n    // The name of the chain defined in the hardhat config.\n    chainName: "hardhat",\n  },\n'})}),"\n",(0,o.jsx)(n.h3,{id:"full-example-walkthrough",children:"Full Example Walkthrough"}),"\n",(0,o.jsxs)(n.p,{children:["Let's look at the complete ",(0,o.jsx)(n.code,{children:"start.ts"})," example. It sets up a complex, multi-chain environment."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// This file is the entry point for `deno task dev`\nimport { OrchestratorConfig, start } from "@paima/orchestrator";\n// ... other imports\n\nconst config = Value.Parse(OrchestratorConfig, {\n  // Section 1: Enable built-in services\n  processes: {\n    [ComponentNames.PAIMA_PGLITE]: true, // Use the dev database\n    [ComponentNames.COLLECTOR]: true,   // Use the log collector\n  },\n\n  // Section 2: Define custom launch sequences\n  processesToLaunch: [\n    // Group A: Launch EVM, wait, and deploy contracts\n    launchEvm("@e2e/evm-contracts"),\n\n    // Group B: Launch Cardano stack\n    launchCardano("@e2e/cardano-contracts"),\n\n    // Group C: Launch Midnight stack\n    launchMidnight("@e2e/midnight-contracts"),\n\n    // Group D: Build and serve the frontend explorer\n    //          Manually defined process. \n    {\n      processes: [\n        {\n          name: "frontend-build",\n          args: ["task", "-f", "@paima/explorer", "build"],\n          waitToExit: true, // Wait for the build to finish...\n        },\n        {\n          name: "frontend-server",\n          args: ["task", "-f", "@paima/explorer", "server:start"],\n          waitToExit: false, // ...then start the server and let it run.\n        },\n      ],\n    },\n  ],\n\n  // Section 3: The Orchestrator will start the sync service after all the above is ready.\n});\n\n// Start the entire process\nawait start(config);\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},6404:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(9593);const o={},r=s.createContext(o);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);