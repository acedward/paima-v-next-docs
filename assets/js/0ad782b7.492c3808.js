"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8666],{6613:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(9593);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}},9566:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"home/components/achievements","title":"Achievements","description":"NOTE THIS IS A PREVIEW DOCUMENTATION. NYI.","source":"@site/docs/home/100-components/114-achievements.md","sourceDirName":"home/100-components","slug":"/home/components/achievements","permalink":"/paima-v-next-docs/home/components/achievements","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-components/114-achievements.md","tags":[],"version":"current","sidebarPosition":114,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Randomness","permalink":"/paima-v-next-docs/home/components/randomness"},"next":{"title":"Frontend (dApp)","permalink":"/paima-v-next-docs/home/components/frontend"}}');var i=t(3261),a=t(6613);const r={},o="Achievements",c={},l=[{value:"How it Works",id:"how-it-works",level:3},{value:"1. Defining Achievement Metadata",id:"1-defining-achievement-metadata",level:3},{value:"2. Updating Player Progress in an STF",id:"2-updating-player-progress-in-an-stf",level:3},{value:"3. Consuming the Achievement API",id:"3-consuming-the-achievement-api",level:3}];function h(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"achievements",children:"Achievements"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"NOTE THIS IS A PREVIEW DOCUMENTATION. NYI."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Paima Engine includes a built-in implementation of the ",(0,i.jsx)(n.strong,{children:"Paima Request for Comments #1 (PRC-1)"}),", an open standard for exposing in-game achievements. By following this standard, your dApp can broadcast player accomplishments in a consistent, interoperable format."]}),"\n",(0,i.jsx)(n.p,{children:"This allows third-party tools, community-run leaderboards, and other dApps to easily integrate with your game, creating a richer, more engaging ecosystem for your players."}),"\n",(0,i.jsx)(n.h3,{id:"how-it-works",children:"How it Works"}),"\n",(0,i.jsx)(n.p,{children:"The achievement system is split into two main parts:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Static Metadata"}),": The list of all possible achievements in your game, including their names, descriptions, and icons. You define this once."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dynamic Progress"}),": The per-player data, tracking which achievements a player has unlocked and their progress towards others. You update this from within your State Transition Functions (STFs)."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Paima Engine takes care of the rest, automatically exposing this information through a standardized, PRC-1 compliant API."}),"\n",(0,i.jsx)(n.h3,{id:"1-defining-achievement-metadata",children:"1. Defining Achievement Metadata"}),"\n",(0,i.jsxs)(n.p,{children:["To enable the achievement API, you must define the list of all possible achievements for your game. This is done in your ",(0,i.jsx)(n.code,{children:"api.ts"})," file (or a similar entry point for your API logic) by exporting a constant named ",(0,i.jsx)(n.code,{children:"achievements"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Example (",(0,i.jsx)(n.code,{children:"api.ts"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'// Define all possible achievements for your game.\nconst achievementList: Achievement[] = [\n    {\n        name: "finish-chapter-1",\n        displayName: "Over The River",\n        description: "Finish Chapter 1.",\n        isActive: true, // This achievement can currently be earned.\n    },\n    {\n        name: "win-10-battles",\n        displayName: "Battle Hardened",\n        description: "Win 10 battles against any opponent.",\n        isActive: true,\n    },\n];\n\n// Create the full metadata object.\nconst metadata: AchievementMetadata = {\n    game: {\n        id: "my-awesome-game",\n    },\n    list: achievementList,\n};\n\n// Export the metadata to enable the Paima Engine\'s built-in achievement API.\nexport const achievements = Promise.resolve(metadata);\n'})}),"\n",(0,i.jsx)(n.h3,{id:"2-updating-player-progress-in-an-stf",children:"2. Updating Player Progress in an STF"}),"\n",(0,i.jsxs)(n.p,{children:["Once your metadata is defined, the next step is to track player progress. This is done from within your ",(0,i.jsx)(n.strong,{children:"State Transition Functions (STFs)"})," by using special database queries provided by the ",(0,i.jsx)(n.code,{children:"@paima/db"})," package."]}),"\n",(0,i.jsx)(n.p,{children:"When a player performs an action that should affect an achievement, you:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Get"})," their current progress for that achievement using ",(0,i.jsx)(n.code,{children:"getAchievementProgress"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set"})," their new progress using ",(0,i.jsx)(n.code,{children:"setAchievementProgress"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["This ",(0,i.jsx)(n.code,{children:"set"})," operation generates a database update that the Paima Engine will apply atomically with the rest of your STF's state changes."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Example (inside an STF in ",(0,i.jsx)(n.code,{children:"state-machine.ts"}),"):"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"import { getAchievementProgress, setAchievementProgress } from '@paima/db';\nimport type { ISetAchievementProgressParams } from '@paima/db';\n\n// Assume this function is called inside your STF when a player wins a battle.\nasync function handleBattleWin(walletId: number, blockTimestamp: Date, dbConn: Pool): Promise<SQLUpdate[]> {\n  const achievementName = 'win-10-battles';\n\n  // 1. Get the player's current progress for this achievement.\n  const currentProgress = await getAchievementProgress.run({\n    wallet: walletId,\n    names: [achievementName]\n  }, dbConn);\n\n  const progressRow = currentProgress[0];\n\n  // If the achievement is not yet completed...\n  if (!progressRow?.completed_date) {\n    const newProgress = (progressRow?.progress ?? 0) + 1;\n    const isCompleted = newProgress >= 10;\n\n    // 2. Return a command to update the progress in the database.\n    // If the achievement is now complete, we also set the completion date.\n    return [\n      [setAchievementProgress, {\n        name: achievementName,\n        wallet: walletId,\n        completed_date: isCompleted ? blockTimestamp : null,\n        progress: newProgress,\n        total: 10,\n      } satisfies ISetAchievementProgressParams],\n    ];\n  }\n\n  // The achievement is already complete, so no update is needed.\n  return [];\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-consuming-the-achievement-api",children:"3. Consuming the Achievement API"}),"\n",(0,i.jsx)(n.p,{children:"Once enabled, your Paima Engine node will automatically serve the PRC-1 compliant API endpoints. Other developers, services, or even your own frontend can then query this data."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"List All Achievements"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"GET /achievements/public/list"})}),"\n",(0,i.jsx)(n.li,{children:"Returns a list of all defined achievements, their descriptions, and global completion statistics."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Get a Player's Achievements"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"GET /achievements/wallet/:walletAddress"})}),"\n",(0,i.jsx)(n.li,{children:"Returns the specific progress for a given wallet, including which achievements they have completed and their progress on others."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This open standard makes it incredibly easy for anyone in the ecosystem to build on top of your game's accomplishments, fostering a more connected and engaging community."})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);