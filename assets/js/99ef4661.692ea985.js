"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[97],{622:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/e2e-wallets-aaceefe5665c75af263f24edf42ab452.png"},5396:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"home/templates/wallets","title":"Wallets Demo","description":"*   Location: /e2e/e2e-wallets/","source":"@site/docs/home/1200-templates/1202-wallets.md","sourceDirName":"home/1200-templates","slug":"/home/templates/wallets","permalink":"/paima-v-next-docs/home/templates/wallets","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/1200-templates/1202-wallets.md","tags":[],"version":"current","sidebarPosition":1202,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"EVM-Midnight Template","permalink":"/paima-v-next-docs/home/templates/evm-midnight"},"next":{"title":"Chess Template","permalink":"/paima-v-next-docs/home/templates/chess"}}');var a=t(3261),s=t(6613);const o={},l="Wallets Demo",c={},r=[{value:"Core Concept: A Unified Wallet Experience",id:"core-concept-a-unified-wallet-experience",level:2},{value:"How to Run",id:"how-to-run",level:2},{value:"The Components in Action",id:"the-components-in-action",level:2},{value:"Code Deep Dive: <code>App.tsx</code>",id:"code-deep-dive-apptsx",level:2},{value:"1. Configuration",id:"1-configuration",level:3},{value:"2. Wallet Connection",id:"2-wallet-connection",level:3},{value:"3. Submitting a Concise Input to a Paima L2 Contract",id:"3-submitting-a-concise-input-to-a-paima-l2-contract",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"wallets-demo",children:"Wallets Demo"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Location: ",(0,a.jsx)(n.code,{children:"/e2e/e2e-wallets/"})]}),"\n",(0,a.jsxs)(n.li,{children:["Highlights: A comprehensive example frontend to use the ",(0,a.jsx)(n.code,{children:"@paima/wallets"})," library, demonstrating multi-chain wallet connections and different transaction submission methods."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The Wallets Demo is a developer tool and an interactive example that showcases how to integrate various blockchain wallets into a Paima Engine dApp. It provides a clear, hands-on demonstration of connecting to different chains, signing messages, and submitting transactions, serving as a practical guide for developers."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Wallets Demo",src:t(622).A+"",width:"2144",height:"1824"})}),"\n",(0,a.jsx)(n.h2,{id:"core-concept-a-unified-wallet-experience",children:"Core Concept: A Unified Wallet Experience"}),"\n",(0,a.jsxs)(n.p,{children:["The primary goal of this demo is to illustrate the power and flexibility of the ",(0,a.jsx)(n.code,{children:"@paima/wallets"}),' library. It answers the question: "How can my dApp seamlessly handle wallets from different ecosystems like EVM, Cardano, Polkadot, and more?"']}),"\n",(0,a.jsx)(n.p,{children:"The application demonstrates three key user flows:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Connecting Wallets"}),": Shows how to initiate connections with a wide variety of wallets, from browser extensions like MetaMask to local, programmatic wallets for testing."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Signing Messages"}),": A standard way to verify ownership of an address without submitting an on-chain transaction."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Submitting Transactions"}),": Illustrates the different ways a user can send data to your Paima Engine application:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Direct On-Chain"}),": A standard transaction sent to a specific Paima L2 contract."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Via the Batcher"}),": A gasless, user-friendly alternative where transactions are submitted through a Paima service."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This demo is an essential resource for any developer looking to build a multi-chain dApp on Paima Engine."}),"\n",(0,a.jsx)(n.h2,{id:"how-to-run",children:"How to Run"}),"\n",(0,a.jsx)(n.p,{children:"(TODO move to own template)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"deno install --allow-scripts && ./patch.sh\ndeno task -f @e2e/evm-contracts build\ndeno task -f @e2e/evm-contracts deploy:standalone\ndeno task -f @e2e/midnight-contracts midnight-contract:compile\n# If running on linux set env DISABLE_LINUX_YACI=true\ndeno task -f @e2e/node dev\n"})}),"\n",(0,a.jsx)(n.p,{children:"In another terminal, run the demo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"deno task -f @e2e/wallets-ui dev\n"})}),"\n",(0,a.jsx)(n.h2,{id:"the-components-in-action",children:"The Components in Action"}),"\n",(0,a.jsx)(n.p,{children:"The demo is a standalone React + Vite application. Its interface is divided into three main sections:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Select a Primitive"}),': A "primitive" is a pre-configured listener for on-chain events. In this demo, you select which on-chain contract or event you want to interact with. The list is dynamically loaded from the engine\'s configuration.']}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Connect Wallet"}),": Based on the selected primitive, a list of compatible wallets is displayed. For example, selecting an EVM-based primitive will show EVM wallets like MetaMask and Phantom. This section allows you to connect and disconnect from your chosen wallet."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Perform an Action"}),": Once connected, you can interact with the application. For primitives linked to a ",(0,a.jsx)(n.strong,{children:"Paima L2 contract"}),", a form is dynamically generated based on the contract's ",(0,a.jsx)(n.code,{children:"grammar"}),", allowing you to send valid inputs."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"code-deep-dive-apptsx",children:["Code Deep Dive: ",(0,a.jsx)(n.code,{children:"App.tsx"})]}),"\n",(0,a.jsxs)(n.p,{children:["The entire logic is contained within ",(0,a.jsx)(n.code,{children:"/e2e/e2e-wallets/client/src/App.tsx"}),". Let's break down the key parts."]}),"\n",(0,a.jsx)(n.h3,{id:"1-configuration",children:"1. Configuration"}),"\n",(0,a.jsx)(n.p,{children:"The application first sets up the necessary configuration to communicate with Paima Engine and its related services."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.code,{children:"paimaEngineConfig"})}),": This object tells the wallet library where to find key services, such as the Batcher and the Paima L2 contract. This normally is declared once per application globally."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import { hardhat } from "viem/chains";\nimport { PaimaEngineConfig } from "@paima/wallets";\n\nconst paimaEngineConfig = new PaimaEngineConfig(\n  "my-app-name",\n  "parallelEvmRPC_fast", // paima l2 sync protocol name\n  "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512", // paima l2 contract address\n  hardhat, // paima l2 chain\n  undefined, // use default paima l2 abi\n  "http://localhost:3334", // batcher url\n);\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-wallet-connection",children:"2. Wallet Connection"}),"\n",(0,a.jsxs)(n.p,{children:["The core of the wallet connection logic revolves around the ",(0,a.jsx)(n.code,{children:"walletLogin"})," function from ",(0,a.jsx)(n.code,{children:"@paima/wallets"}),". The demo pre-defines a list of connection options, each with a specific ",(0,a.jsx)(n.code,{children:"WalletMode"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'// Example for an injected EVM wallet (MetaMask)\n{\n  name: "EVM Injected",\n  mode: WalletMode.EvmInjected,\n  login: () =>\n    handleLogin(() =>\n      walletLogin({\n        mode: WalletMode.EvmInjected,\n        preference: { name: "io.metamask" },\n      })\n    ),\n  types: ["evm"],\n},\n\n// Example for a programmatic local wallet for testing\n{\n  name: "EVM (Viem Local Wallet)",\n  mode: WalletMode.EvmEthers,\n  login: () =>\n    handleLogin(() =>\n      walletLogin({\n        mode: WalletMode.EvmEthers,\n        connection: { /* ... custom ethers.js signer ... */ },\n        preferBatchedMode: false,\n      })\n    ),\n  types: ["evm"],\n},\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"handleLogin"})," wrapper function simply processes the result of the ",(0,a.jsx)(n.code,{children:"walletLogin"})," call, updating the React state with the connected wallet's information or displaying an error."]}),"\n",(0,a.jsx)(n.h3,{id:"3-submitting-a-concise-input-to-a-paima-l2-contract",children:"3. Submitting a Concise Input to a Paima L2 Contract"}),"\n",(0,a.jsxs)(n.p,{children:["When a user connects and selects a primitive corresponding to a Paima L2 contract, the application needs to show a form for the available functions. It does this by reading a ",(0,a.jsx)(n.code,{children:"grammar"})," object, which defines the inputs for each state transition function."]}),"\n",(0,a.jsxs)(n.p,{children:["This is a specific example on how to obtain the fields for a ",(0,a.jsx)(n.code,{children:"concise"})," input for this template, but it's a general approach for any Paima L2 contract."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'// A simplified view of the form rendering logic\nconst args = grammar[selectedFunction as keyof typeof grammar];\n\nreturn (\n  <div>\n    <h3>{selectedFunction}</h3>\n    {args.map(([name, schema]) => (\n      <div key={name} className="form-field">\n        <label>{name}:</label>\n        {renderInput(name, schema, name)}\n      </div>\n    ))}\n    {/* ... submit buttons ... */}\n  </div>\n);\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"handleSubmit"})," function takes the user's input and uses the ",(0,a.jsx)(n.code,{children:"@paima/wallets"})," library to send it to the blockchain. It showcases the three main interaction patterns you will normally use"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Signing a message"}),"\n",(0,a.jsx)(n.li,{children:"Sending a direct transaction to the Paima L2 contract"}),"\n",(0,a.jsx)(n.li,{children:"Sending a transaction via the Batcher"}),"\n",(0,a.jsxs)(n.li,{children:["Automatic Selection of the appropriate submission method based on the ",(0,a.jsx)(n.code,{children:"preferBatchedMode"})," flag"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'const handleSubmit = async () => {\n  const conciseData = [selectedFunction, ...Object.values(formValues)];\n  // Build message as ["action-name", "input-A", 100, ...]\n  switch (selectedAction) {\n    // Sign message\n    case "signMessage": {\n      // Verifies ownership without a transaction\n      const signedMessage = await signMessage(wallet, JSON.stringify(formValues));\n      setActionResult(JSON.stringify(signedMessage, null, 2));\n      break;\n    }\n    // Automatically selects the appropriate submission method based on the paimaEngineConfig\n    case "automatic": {\n      const result = await sendTransaction(\n        wallet,\n        conciseData,\n        paimaEngineConfig,\n      );\n      const str = JSON.stringify(result, null, 2);\n      setActionResult(`Transaction sent. Result: ${str}`);\n      break;\n    }\n    // Send Self Sequenced Transaction\n    case "sendSelfSequencedTransaction": {\n      // Submits a direct transaction to the Paima L2 contract\n      const result = await sendSelfSequencedTransaction(\n        wallet,\n        conciseData,\n        paimaEngineConfig,\n      );\n      const str = JSON.stringify(result, null, 2);\n      setActionResult(`Transaction sent. Result: ${str}`);\n      break;\n    }\n    // Submits the transaction via the gasless Batcher service\n    case "sendBatcherTransaction": {\n      const result = await sendBatcherTransaction(\n        wallet,\n        conciseData,\n        paimaEngineConfig,\n      );\n      const str = JSON.stringify(result, null, 2);\n      setActionResult(`Batcher transaction sent. Result: ${str}`);\n      break;\n    }\n  }\n};\n'})}),"\n",(0,a.jsxs)(n.p,{children:["This demonstrates how a single wallet object, regardless of its underlying chain or type, can be used with a unified API (",(0,a.jsx)(n.code,{children:"signMessage"}),", ",(0,a.jsx)(n.code,{children:"sendTransaction"}),", ",(0,a.jsx)(n.code,{children:"sendSelfSequencedTransaction"}),", ",(0,a.jsx)(n.code,{children:"sendBatcherTransaction"}),") to interact with the Paima Engine ecosystem."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},6613:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var i=t(9593);const a={},s=i.createContext(a);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);