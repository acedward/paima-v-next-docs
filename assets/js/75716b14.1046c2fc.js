"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4216],{5657:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"home/paima-standards/prc2","title":"PRC-2: Paima Hololocker Interface","description":"Core Idea*: A standard smart contract interface for non-custodially \\"projecting\\" L1 ERC721 NFTs into an L2 Paima dApp without traditional bridging.","source":"@site/docs/home/400-paima-standards/prc2.md","sourceDirName":"home/400-paima-standards","slug":"/home/paima-standards/prc2","permalink":"/home/paima-standards/prc2","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/400-paima-standards/prc2.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"PRC-1: Paima Achievement Interface","permalink":"/home/paima-standards/prc1"},"next":{"title":"PRC-3: Paima Inverse Projection Interface (NFTs)","permalink":"/home/paima-standards/prc3"}}');var s=n(3261),i=n(6613);const o={},a="PRC-2: Paima Hololocker Interface",c={},l=[];function d(e){const t={code:"code",h1:"h1",header:"header",li:"li",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"prc-2-paima-hololocker-interface",children:"PRC-2: Paima Hololocker Interface"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Core Idea"}),': A standard smart contract interface for non-custodially "projecting" L1 ERC721 NFTs into an L2 Paima dApp without traditional bridging.']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Problem Solved"}),": Bridging NFTs from a secure L1 to a game-specific L2 is often slow, expensive, and exposes users to significant security risks from bridge exploits. The Hololocker allows users to retain full ownership of their L1 assets while still being able to use them in-game."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"How it Works (High Level)"}),": A user locks their ERC721 token in the ",(0,s.jsx)(t.code,{children:"Hololocker"})," smart contract on the L1. The Paima Engine detects this ",(0,s.jsx)(t.code,{children:"Lock"})," event and makes the asset available to the user within the L2 game state. To withdraw, the user must first ",(0,s.jsx)(t.code,{children:"requestUnlock"}),", which initiates a time-delay. After the delay (based on the L1's finality time), they can call ",(0,s.jsx)(t.code,{children:"withdraw"})," to get their NFT back."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Key Components"}),":","\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"HololockerInterface"})," (Solidity)"]}),": The standard interface that the contract must implement."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"lock()"})," function"]}),": The function a user calls to deposit their NFT into the contract."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"requestUnlock()"})," function"]}),": Initiates the time-locked withdrawal process."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"withdraw()"})," function"]}),": The final function to retrieve the NFT from the contract after the time-lock has passed."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},6613:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(9593);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);