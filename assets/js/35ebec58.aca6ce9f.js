"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[241],{2809:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/chess-f307f85897e381dbd8a52808333938cf.png"},4790:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"home/templates/chess","title":"Chess Template","description":"* Location: /templates/chess","source":"@site/docs/home/1200-templates/1203-chess.md","sourceDirName":"home/1200-templates","slug":"/home/templates/chess","permalink":"/home/templates/chess","draft":false,"unlisted":false,"editUrl":"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/1200-templates/1203-chess.md","tags":[],"version":"current","sidebarPosition":1203,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Wallets Demo","permalink":"/home/templates/wallets"}}');var l=n(3261),i=n(6613);const a={},r="Chess Template",c={},o=[{value:"Core Concept: Onchain Chess",id:"core-concept-onchain-chess",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Chess Game",id:"chess-game",level:3},{value:"The Components in Action",id:"the-components-in-action",level:2},{value:"On-Chain Logic",id:"on-chain-logic",level:2},{value:"The State Machine (<code>state-machine.ts</code>)",id:"the-state-machine-state-machinets",level:2},{value:"<code>createdLobby</code>",id:"createdlobby",level:3},{value:"<code>joinLobby</code>",id:"joinlobby",level:3},{value:"<code>closeLobby</code>",id:"closelobby",level:3},{value:"<code>submitMoves</code>",id:"submitmoves",level:3},{value:"Scheduled Transitions",id:"scheduled-transitions",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"API",id:"api",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"Get Open Lobbies",id:"get-open-lobbies",level:2},{value:"Query Parameters",id:"query-parameters",level:3},{value:"Example Request",id:"example-request",level:3},{value:"Example Response",id:"example-response",level:3},{value:"Response Body",id:"response-body",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"chess-template",children:"Chess Template"})}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:["Location: ",(0,l.jsx)(t.code,{children:"/templates/chess"})]}),"\n",(0,l.jsx)(t.li,{children:"Highlights: A fully-featured turn-based game (Chess) on an EVM chain using Paima's L2."}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["The ",(0,l.jsx)(t.code,{children:"chess"})," template provides a complete implementation of a web-based chess game. It's an excellent example of how to build turn-based games using Paima Engine, showcasing lobby creation, player matching, and in-game move submission, all handled through a Paima L2 contract on an EVM chain."]}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsx)(t.img,{alt:"chess-web",src:n(2809).A+"",width:"1842",height:"837"})}),"\n",(0,l.jsx)(t.h2,{id:"core-concept-onchain-chess",children:"Core Concept: Onchain Chess"}),"\n",(0,l.jsx)(t.p,{children:"The goal of this template is to demonstrate a classic turn-based game where all game logic is processed deterministically by the Paima Engine. Players interact with a simple frontend to play chess, and their moves are submitted to the blockchain."}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Game State"}),": Managed entirely by the Paima Engine, ensuring a consistent and verifiable state."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Player Actions"}),": All actions, like creating a lobby or making a move, are sent as inputs to a ",(0,l.jsx)(t.code,{children:"PaimaL2Contract"})," on an EVM chain."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Backend Logic"}),": The state machine processes these inputs to update the game state, such as moving pieces, ending games, and updating player stats."]}),"\n"]}),"\n",(0,l.jsx)(t.p,{children:"This template is a great starting point for any turn-based game, not just chess."}),"\n",(0,l.jsx)(t.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sh",children:"# Check for external dependencies\n./../check.sh\n\n# Install packages\ndeno install --allow-scripts && ./patch.sh\n\n# Compile contracts\n# TODO: Verify if there is a specific build command for chess contracts, assuming it is build:evm for now.\ndeno task build:evm\n\n# Launch Paima Engine Node\ndeno task dev\n"})}),"\n",(0,l.jsx)(t.p,{children:"Now you should see the dApp running in your browser!"}),"\n",(0,l.jsx)(t.h3,{id:"chess-game",children:"Chess Game"}),"\n",(0,l.jsx)("iframe",{src:"https://drive.google.com/file/d/1d-p8E9tkIYfiO3kH_bwVK77CiMKs4awW/preview",width:"640",height:"480",allow:"autoplay"}),"\n",(0,l.jsx)(t.h2,{id:"the-components-in-action",children:"The Components in Action"}),"\n",(0,l.jsxs)(t.p,{children:["When you run ",(0,l.jsx)(t.code,{children:"deno task dev"})," for this template, the ",(0,l.jsx)(t.a,{href:"/home/components/processes",children:"Process Orchestrator"})," sets up a complete local environment:"]}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Hardhat EVM Node"}),": A local EVM blockchain."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Paima Dev Services"}),": The development database, log collector, TUI, and the Paima Explorer."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Paima Engine"}),": Node to sync the chain and process game logic."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.strong,{children:"Frontend"}),": A web interface to play chess."]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"on-chain-logic",children:"On-Chain Logic"}),"\n",(0,l.jsxs)(t.p,{children:["The chess template uses a ",(0,l.jsx)(t.code,{children:"PaimaL2Contract"}),' on the EVM chain. This contract acts as a "mailbox" for player inputs. Instead of implementing complex game logic on-chain, which would be expensive and slow, players submit simple, formatted strings representing their actions to the contract\'s ',(0,l.jsx)(t.code,{children:"submitInput"})," function."]}),"\n",(0,l.jsxs)(t.p,{children:["Paima Engine monitors the ",(0,l.jsx)(t.code,{children:"PaimaGameInteraction"})," event from this contract to receive and process player inputs."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-solidity",children:"// Simplified example of what the PaimaL2Contract does\ncontract PaimaL2 {\n    event PaimaGameInteraction(address indexed user, bytes input, uint256 indexed nonce);\n\n    function submitInput(bytes calldata input) external payable {\n        // ... logic to handle input submission ...\n        emit PaimaGameInteraction(msg.sender, input, nonce);\n    }\n}\n"})}),"\n",(0,l.jsxs)(t.h2,{id:"the-state-machine-state-machinets",children:["The State Machine (",(0,l.jsx)(t.code,{children:"state-machine.ts"}),")"]}),"\n",(0,l.jsxs)(t.p,{children:["The State Machine contains the core game logic for chess. It listens for inputs from the ",(0,l.jsx)(t.code,{children:"PaimaL2Contract"})," and updates the game state in the database accordingly."]}),"\n",(0,l.jsx)(t.h3,{id:"createdlobby",children:(0,l.jsx)(t.code,{children:"createdLobby"})}),"\n",(0,l.jsx)(t.p,{children:"Triggered when a player creates a new game lobby. It creates a new lobby in the database and waits for another player to join."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'stm.addStateTransition("createdLobby", function* (data) {\n  const user = data.signerAddress;\n  const { blockHeight, parsedInput, randomGenerator } = data;\n  // ... logic to create a lobby ...\n});\n'})}),"\n",(0,l.jsx)(t.h3,{id:"joinlobby",children:(0,l.jsx)(t.code,{children:"joinLobby"})}),"\n",(0,l.jsx)(t.p,{children:"Triggered when a player joins an existing lobby. This will match two players together and start a new chess game."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'stm.addStateTransition("joinLobby", function* (data) {\n  const user = data.signerAddress;\n  const { blockHeight, parsedInput, randomGenerator } = data;\n  // ... logic to join a lobby and start a game ...\n});\n'})}),"\n",(0,l.jsx)(t.h3,{id:"closelobby",children:(0,l.jsx)(t.code,{children:"closeLobby"})}),"\n",(0,l.jsx)(t.p,{children:"Allows a player to close a lobby they created if it's no longer needed."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'stm.addStateTransition("closeLobby", function* (data) {\n  const user = data.signerAddress;\n  // ... logic to close a lobby ...\n});\n'})}),"\n",(0,l.jsx)(t.h3,{id:"submitmoves",children:(0,l.jsx)(t.code,{children:"submitMoves"})}),"\n",(0,l.jsx)(t.p,{children:"This is the main STF for gameplay. It's triggered when a player submits their move for the current turn. The state machine validates the move, updates the board state, and checks for game-ending conditions like checkmate or stalemate."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'stm.addStateTransition("submitMoves", function* (data) {\n  const user = data.signerAddress;\n  const { blockHeight, parsedInput, randomGenerator } = data;\n  // ... logic to process player moves, update board state, etc. ...\n});\n'})}),"\n",(0,l.jsx)(t.h3,{id:"scheduled-transitions",children:"Scheduled Transitions"}),"\n",(0,l.jsx)(t.p,{children:"The chess template also includes examples of scheduled transitions, which are not directly triggered by player input but by the engine at specific times or intervals."}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"z"}),': Handles "zombie" games, where a player has timed out.']}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"u"}),": Updates user statistics."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"sb"}),": Submits moves for AI/bot players."]}),"\n"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'stm.addStateTransition("z", function* (data) {\n const { blockHeight, parsedInput, randomGenerator } = data;\n // ... logic to process actions when players have timed out ...\n});\n'})}),"\n",(0,l.jsx)(t.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,l.jsx)(t.p,{children:"The database has the following tables:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"lobbies: A table to store the created and ongoing chess games."}),"\n",(0,l.jsx)(t.li,{children:"rounds: A table to store the rounds of each chess game."}),"\n",(0,l.jsx)(t.li,{children:"match_moves: A table to store the moves of each chess game."}),"\n",(0,l.jsx)(t.li,{children:"final_match_state: A table to store the final state of each chess game."}),"\n",(0,l.jsx)(t.li,{children:"global_user_state: A table to store the user stats."}),"\n"]}),"\n",(0,l.jsxs)(t.p,{children:["The database schema is defined in the ",(0,l.jsx)(t.code,{children:"database/src/migrations/database.sql"})," file."]}),"\n",(0,l.jsxs)(t.p,{children:["The database queries are defined in the ",(0,l.jsx)(t.code,{children:"database/src/sql"})," folder."]}),"\n",(0,l.jsx)(t.p,{children:"We will look at the lobbies tables in more detail."}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-sql",children:"CREATE TABLE lobbies (\n  -- Unique identifier for the lobby\n  lobby_id TEXT PRIMARY KEY,\n  ...\n  -- The current round of the chess game\n  current_round INTEGER NOT NULL DEFAULT 0,\n  ...\n  -- Whether the lobby is hidden in the API/UI\n  hidden BOOLEAN NOT NULL DEFAULT false,\n  ...\n  -- Whether the lobby is a practice game\n  practice BOOLEAN NOT NULL DEFAULT false,\n  ...\n  -- The difficulty of the bot\n  bot_difficulty INTEGER NOT NULL DEFAULT 0,\n  ...\n  -- The creator of the lobby\n  lobby_creator TEXT NOT NULL,\n  ...\n  -- Whether the player one is white\n  player_one_iswhite BOOLEAN NOT NULL,\n  ...\n  -- The player two of the lobby\n  player_two TEXT,\n  ...\n  -- The state of the lobby\n  lobby_state lobby_status NOT NULL,\n  latest_match_state TEXT NOT NULL\n);\n"})}),"\n",(0,l.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,l.jsx)(t.p,{children:"The chess game comes with a set of backend APIs to query for game state. This is used for the web chess application."}),"\n",(0,l.jsx)(t.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,l.jsx)(t.p,{children:"Here is a high level view of the available endpoints:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/user_stats"}),": Fetches statistics for a given user."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/user_lobbies_blockheight"}),": Gets the block height for a user's lobbies."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/user_lobbies"}),": Retrieves lobbies created by a specific user."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/search_open_lobbies"}),": Searches for open lobbies."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/round_status"}),": Gets the status of a specific round in a lobby."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/round_executor"}),": Fetches the executor of a round."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/random_lobby"}),": Returns a random lobby."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/random_active_lobby"}),": Returns a random active lobby."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/open_lobbies"}),": Fetches a list of open lobbies."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/match_winner"}),": Gets the winner of a match."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/match_executor"}),": Fetches the executor of a match."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"GET /api/lobby_state"}),": Retrieves the current state of a specific lobby."]}),"\n"]}),"\n",(0,l.jsx)(t.h2,{id:"get-open-lobbies",children:"Get Open Lobbies"}),"\n",(0,l.jsx)(t.p,{children:"Let't look into one specific endpoint to understand how the API works.\nThis endpoint allows you to retrieve a paginated list of all open chess lobbies."}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.strong,{children:"Endpoint"}),": ",(0,l.jsx)(t.code,{children:"GET /api/open_lobbies"})]}),"\n",(0,l.jsx)(t.p,{children:"Implementation:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'// Typebox schema for the query parameters\nconst QuerystringSchema = Type.Object({\n  wallet: Type.String(),\n  count: Type.Optional(Type.Number({ default: 10, minimum: 1, maximum: 100 })),\n  page: Type.Optional(Type.Number({ default: 1, minimum: 1 })),\n});\n\n// Typebox schema for the response body\nconst LobbySchema = Type.Object({\n  lobby_id: Type.String(),\n  lobby_state: Type.String(),\n  ...\n});\n\n// Function to setup the endpoint\nexport function setupOpenLobbies(\n  server: fastify.FastifyInstance,\n  dbConn: Pool,\n): void {\n  server.get<{\n    Querystring: Static<typeof QuerystringSchema>;\n    Reply: Static<typeof ResponseSchema>;\n  }>("/api/open_lobbies", async (request, reply) => {\n    // Get the query parameters\n    let { wallet } = request.query;\n    const { count, page } = request.query;\n    wallet = wallet.toLowerCase();\n\n    // Calculate the offset\n    const offset = page * count;\n\n    // Get the lobbies from the database\n    const lobbies = await getPaginatedOpenLobbies.run(\n      { count: `${count}`, page: `${offset}`, wallet },\n      dbConn,\n    );\n\n    // Send the response\n    reply.send({ lobbies });\n  });\n}\n'})}),"\n",(0,l.jsx)(t.h3,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Parameter"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Default"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Required"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"wallet"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"}}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Yes"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The wallet address of the user."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"count"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"10"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"No"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The number of lobbies to return."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"page"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"1"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"No"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The page number for pagination."})]})]})]}),"\n",(0,l.jsx)(t.h3,{id:"example-request",children:"Example Request"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-bash",children:'curl "http://localhost:3000/api/open_lobbies?wallet=0x123...abc&count=5&page=2"\n'})}),"\n",(0,l.jsx)(t.h3,{id:"example-response",children:"Example Response"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-json",children:'{\n  "lobbies": [\n    {\n      "created_at": "2023-10-27T10:00:00.000Z",\n      "creation_block_height": 123456,\n      "current_round": 1,\n      "hidden": false,\n      "latest_match_state": "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",\n      "lobby_creator": "0x123...abc",\n      "lobby_id": "lobby-xyz-789",\n      "lobby_state": "open",\n      "num_of_rounds": 5,\n      "play_time_per_player": 600,\n      "player_one_iswhite": true,\n      "rating": 1500,\n      "round_length": 180\n    }\n  ]\n}\n'})}),"\n",(0,l.jsx)(t.h3,{id:"response-body",children:"Response Body"}),"\n",(0,l.jsx)(t.p,{children:"The response contains a list of lobby objects with the following fields:"}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Field"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Type"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"created_at"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"date"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Timestamp of when the lobby was created."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"creation_block_height"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Block height at which the lobby was created."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"current_round"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The current round number in the lobby."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"hidden"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"boolean"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Whether the lobby is hidden or not."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"latest_match_state"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The FEN string of the latest match state."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"lobby_creator"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Wallet address of the lobby creator."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"lobby_id"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Unique identifier for the lobby."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"lobby_state"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"string"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:'Current state of the lobby (e.g., "open").'})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"num_of_rounds"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Total number of rounds in the match."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"play_time_per_player"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Play time per player in seconds."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"player_one_iswhite"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"boolean"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Whether player one is playing as white."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"rating"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The rating of the lobby."})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"round_length"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"number"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"The length of each round in seconds."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},6613:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(9593);const l={},i=s.createContext(l);function a(e){const t=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);